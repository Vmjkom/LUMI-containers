# Latest libfabric build
ARG CASSINI_HEADERS_VERSION=9a8a738a879f007849fbc69be8e3487a4abf0952
ARG CXI_DRIVER_VERSION=c284516fa8d0027b8f84e8ca818e8c6bbe320bd8
ARG LIBCXI_VERSION=0f3609b5e224636abffc7ceffe6f4e9c83244c08

RUN set -eux; \
  zypper -n refresh ; \
  zypper --no-gpg-checks -n install -y --force-resolution \
    libconfig-devel \
    libuv-devel \
    fuse-devel  \
    libyaml-devel \
    libnl3-devel \
    libnuma-devel \
    libsensors4-devel \
    libcurl-devel \
    ; zypper clean

RUN set -eux ; \
  git clone --recursive https://github.com/HewlettPackard/shs-cassini-headers /opt/cassini-headers ; \
  git -C /opt/cassini-headers checkout -b mydev $CASSINI_HEADERS_VERSION ; \
  git clone --recursive https://github.com/HewlettPackard/shs-cxi-driver /opt/cxi-driver ; \
  git -C /opt/cxi-driver  checkout -b mydev $CXI_DRIVER_VERSION ; \
  git clone --recursive https://github.com/HewlettPackard/shs-libcxi /opt/shs-libcxi-src ; \
  git -C /opt/shs-libcxi-src checkout -b mydev $LIBCXI_VERSION ; \
  export CPATH=/opt/cassini-headers/include:/opt/cxi-driver/include ; \
  \
  cd /opt/shs-libcxi-src ; \
  ./autogen.sh ; \
  \
  cd /opt/shs-libcxi-src ; \
  CC=gcc-12 \
    CXX=g++-12 \
    CFLAGS='-Wno-unused-but-set-variable' \
      ./configure --prefix=/opt/shs-libcxi --with-rocm=$ROCM_PATH \
        --without-systemd \
        --with-systemdsystemunitdir=/opt/shs-libcxi/systemdsystemunitdir \
        --with-udevrulesdir=/opt/shs-libcxi/udevrulesdir ; \
  \
  sed -i "s#/usr/share/cassini-headers#/opt/cassini-headers/share/cassini-headers#g" /opt/shs-libcxi-src/utils/cxi_dump_csrs.py ; \
  \
  cd /opt/shs-libcxi-src ; \
  make VERBOSE=1 V=1 -j ; \
  make VERBOSE=1 V=1 -j install ; \
  \
  mv /opt/shs-libcxi-src/include /opt/shs-libcxi/include ; \
  cd / ; rm -rf /opt/shs-libcxi-src 

ENV LD_LIBRARY_PATH=/opt/shs-libcxi/lib:$LD_LIBRARY_PATH
ENV LIBFABRIC_VERSION "e08d3161b8038ebfa50a4eb5bf76132e4eaeb137"

RUN set -eux ; \
  export CPATH=/opt/shs-libcxi/include:/opt/cassini-headers/include:/opt/cxi-driver/include ; \
  export LIBRARY_PATH=/opt/shs-libcxi/lib ; \
  \
  git clone --recursive https://github.com/ofiwg/libfabric /opt/libfabric-src ; \
  git -C /opt/libfabric-src checkout -b mydev $LIBFABRIC_VERSION ; \
  \
  cd /opt/libfabric-src ; \
  ./autogen.sh ; \
  \
  mkdir /opt/libfabric-src/build ; \
  \
  cd /opt/libfabric-src/build ; \
  ../configure CC=gcc-12 --prefix=/opt/libfabric \
    LDFLAGS=-Wl,--build-id --enable-only \
    --enable-restricted-dl --enable-tcp --enable-udp --enable-rxm --enable-rxd --enable-hook_debug \
    --enable-hook_hmem --enable-dmabuf_peer_mem --enable-cxi=/opt/shs-libcxi --enable-gdrcopy-dlopen --with-rocr=$ROCM_PATH ; \
  \
  cd /opt/libfabric-src/build ; \
  nice make V=1 VERBOSE=1 -j  ; \
  nice make V=1 VERBOSE=1 -j install ; \
  \
  cd / ; rm -rf /opt/libfabric-src

ENV LIBFABRIC_PATH=/opt/libfabric
ENV LD_LIBRARY_PATH=$LIBFABRIC_PATH/lib:$LD_LIBRARY_PATH
